import rclpy
from rclpy.node import Node

from nav_msgs.msg import Odometry
from std_msgs.msg import Float32
from geometry_msgs.msg import Twist
import time
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Float32
# import keyboard
import serial 

arduino = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, timeout=.1) 
def ultraSonic(): 
     time.sleep(0.05) 
     data = arduino.readline() 
     value_str= data.decode("utf-8") #from byte to string
     print("Number received: ",value_str) # printing the value 
class SpeedOdom(Node):
    def __init__(self):
        super().__init__('speed_odom')

        # Subscribe to the odom topic
        self.subscription = self.create_subscription(Odometry, '/odom', self.odom_callback, 10)
        self.subscription = self.create_subscription
        # Create publishers for float topics
        self.linear_speed_publisher = self.create_publisher(Float32, 'speed_linear', 10)
        self.angular_speed_publisher = self.create_publisher(Float32, 'speed_angular', 10)
        self.movement_publisher = self.create_publisher(Twist, 'cmd_vel', 10)

        # Create a timer publisher which is run every 0.1 seconds
    

        # Subscribe to the scan topic
        self.subscription = self.create_subscription(LaserScan, '/scan', self.lidar_callback, 10)

        # Create a publisher for float topic
        self.publisher_scan_closest = self.create_publisher(Float32, 'scan_closest', 10)



    def odom_callback(self, msg):

        linear_speed = msg.twist.twist.linear.x
        angular_speed = msg.twist.twist.angular.z

        # Print speeds
        #print("L-speed: " + str(linear_speed))
        #print("A-speed: " + str(angular_speed))

        # Publish the speeds to the float topics

        linear_speed_msg = Float32()
        linear_speed_msg.data = linear_speed
        self.linear_speed_publisher.publish(linear_speed_msg)

        angular_speed_msg = Float32()
        angular_speed_msg.data = angular_speed
        self.angular_speed_publisher.publish(angular_speed_msg)

 

        

    def lidar_callback(self, msg):
        object_detected = False
   
        twist_msg = Twist()
        twist_msg.linear.x = 0.2
        if not msg.ranges:
            return

        # Filter out distances less than or equal to 0
        valid_ranges = [x for x in msg.ranges if x > 0]

        # If all distances are 0 or less, return
        if not valid_ranges:
            return

        # Find the closest distance from the laser scan data
        closest_distance = min(valid_ranges)

        # Print the closest distance to the terminal
        print('Closest Distance (m): {}'.format(closest_distance))
        # if(closest_distance <= 0.6 and object_detected==False):
            
     
        print("Data")
        if closest_distance < 0.4 :
         twist_msg.linear.x = 0.0
         time.sleep(0.5)
         object_detected =True
        if object_detected==True:
            #   time.sleep(15)
              
              for x in range(0, 100):
               ultraSonic()
               twist_msg.linear.x = 0.0
               twist_msg.angular.z = 0.7
              object_detected = False
            #    twist_msg.linear.x = -0.5
               
               
            #   time.sleep(3)
            #   twist_msg.angular.z = -8.0
              
        # if (keyboard.is_pressed('ctrl')):
        #  twist_msg.linear.x = 0.0
        #  time.wait(5)
            
   
            
        # Publish the closest distance on the "scan_closest" topic
        scan_closest_msg = Float32()
        scan_closest_msg.data = closest_distance
        self.publisher_scan_closest.publish(scan_closest_msg)
        self.movement_publisher.publish(twist_msg)
    

def main(args=None):
    print('Starting speed_odom.py.')

    rclpy.init(args=args)
    
    speed_odom = SpeedOdom()
 
    rclpy.spin(speed_odom)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    speed_odom.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
